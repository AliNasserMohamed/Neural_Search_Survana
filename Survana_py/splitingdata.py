# -*- coding: utf-8 -*-
"""SplitingData.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ta5M58eSaXRTRX6ens0FHYye0GompekZ

#**Libraries**
"""

from sklearn.base import BaseEstimator, TransformerMixin
import pandas as pd
import re

"""#**Clean And Spliting Data**"""

class Chunking(BaseEstimator, TransformerMixin):
    def __init__(self):
        pass

    def read_data(self, filename):
        df = pd.read_csv(filename)
        return df

    def fit(self, X, y=None):
        pass

    def clean_data(self, text):
        url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
        text = re.sub(url_pattern, '', text)
        emoji_pattern = re.compile(r'[\U00010000-\U0010ffff]')
        text = re.sub(emoji_pattern, '', text)
        #text = re.sub(r'[^a-zA-Z\s]', '', text)
        text = re.sub(r'(?<!\w)(?<!\.)[^\w\s]*', '', text)
        return text

    def transform(self, X):

        transformed_X = X.copy()

        transformed_X['description'] = transformed_X['description'].str.lower()
        transformed_X['description'] = transformed_X['description'].apply(self.clean_data)

        return transformed_X["description"].values

    def fit_transform(self, X, y=None):
        self.fit(X, y)
        return self.transform(X)

    def spliting(self, data):
        All_sentences = []
        for text in data:
            sentences = []
            for sentence in text.split("."):
                if len(sentence) > 1:
                    sentences.append(sentence.strip())
            All_sentences.extend(sentences[0:-1])
        return All_sentences
